{"version":3,"sources":["main.js"],"names":["context","AudioContext","buildNode","source","gain","createGain","analyser","createAnalyser","fftSize","value","connect","destination","getArray","name","length","getFloatTimeDomainData","getFloatFrequencyDomainData","frequencyBinCount","list","Float32Array","Array","from","releaseAudioSource","release","node","linearRampToValueAtTime","currentTime","setTimeout","forEach","disconnect","analyze","port","fn","nodes","requestAnimationFrame","send","map","id","data","app","Elm","Main","init","document","querySelector","flags","sampleRate","notePress","frequency","attack","type","osc","createOscillator","start","ports","addAudioSource","activateMic","Promise","all","resume","navigator","mediaDevices","getUserMedia","audio","then","_","stream","createMediaStreamSource","getWaveforms","waveforms","worker","Worker","onmessage","frequencies","calculateFrequencies","postMessage","subscriptions","portName","subscribe"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG,IAAIC,YAAJ,EAAhB;;AAEA,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,MAAMC,IAAI,GAAGJ,OAAO,CAACK,UAAR,EAAb;AACA,MAAMC,QAAQ,GAAGN,OAAO,CAACO,cAAR,EAAjB;AAEAD,EAAAA,QAAQ,CAACE,OAAT,GAAmB,KAAK,EAAxB;AACAJ,EAAAA,IAAI,CAACA,IAAL,CAAUK,KAAV,GAAkB,CAAlB;AACAN,EAAAA,MAAM,CAACO,OAAP,CAAeN,IAAf;AACAA,EAAAA,IAAI,CAACM,OAAL,CAAaV,OAAO,CAACW,WAArB;AACAR,EAAAA,MAAM,CAACO,OAAP,CAAeJ,QAAf;AACA,SAAO;AAAEH,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,IAAI,EAAJA,IAAV;AAAgBE,IAAAA,QAAQ,EAARA;AAAhB,GAAP;AACD;;AAED,SAASM,QAAT,CAAkBN,QAAlB,EAA4BO,IAA5B,EAAkC;AAChC,MAAMC,MAAM,GAAG;AACbC,IAAAA,sBAAsB,EAAET,QAAQ,CAACE,OADpB;AAEbQ,IAAAA,2BAA2B,EAAEV,QAAQ,CAACW;AAFzB,GAAf;AAKA,MAAMC,IAAI,GAAG,IAAIC,YAAJ,CAAiBL,MAAM,CAACD,IAAD,CAAvB,CAAb;AACAP,EAAAA,QAAQ,CAACO,IAAD,CAAR,CAAeK,IAAf;AACA,SAAOE,KAAK,CAACC,IAAN,CAAWH,IAAX,CAAP;AACD;;AAED,SAASI,kBAAT,OAA2E;AAAA,MAA7CC,OAA6C,QAA7CA,OAA6C;AAAA,uBAApCC,IAAoC;AAAA,MAA5BpB,IAA4B,aAA5BA,IAA4B;AAAA,MAAtBD,MAAsB,aAAtBA,MAAsB;AAAA,MAAdG,QAAc,aAAdA,QAAc;AACzEF,EAAAA,IAAI,CAACA,IAAL,CAAUqB,uBAAV,CAAkC,CAAlC,EAAqCzB,OAAO,CAAC0B,WAAR,GAAsBH,OAA3D;AACAI,EAAAA,UAAU,CAAC,YAAM;AACf,KAACvB,IAAD,EAAOD,MAAP,EAAeG,QAAf,EAAyBsB,OAAzB,CAAiC,UAAAJ,IAAI,EAAI;AACvCA,MAAAA,IAAI,CAACK,UAAL;AACD,KAFD;AAGD,GAJS,EAIPN,OAAO,GAAG,IAJH,CAAV;AAKD;;AAED,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,EAAP;AAAA,SAAc,UAAAC,KAAK,EAAI;AACrCC,IAAAA,qBAAqB,CAAC,YAAM;AAC1BH,MAAAA,IAAI,CAACI,IAAL,CACEF,KAAK,CAACG,GAAN,CAAU;AAAA,YAAGC,EAAH,SAAGA,EAAH;AAAA,YAAe/B,QAAf,SAAOkB,IAAP,CAAelB,QAAf;AAAA,eAAiC;AACzC+B,UAAAA,EAAE,EAAFA,EADyC;AAEzCC,UAAAA,IAAI,EAAE1B,QAAQ,CAACN,QAAD,EAAW0B,EAAX;AAF2B,SAAjC;AAAA,OAAV,CADF;AAMD,KAPoB,CAArB;AAQD,GATe;AAAA,CAAhB;;AAWA,IAAMO,GAAG,GAAGC,UAAIC,IAAJ,CAASC,IAAT,CAAc;AACxBlB,EAAAA,IAAI,EAAEmB,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CADkB;AAExBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,UAAU,EAAE9C,OAAO,CAAC8C;AAAtB;AAFiB,CAAd,CAAZ;;AAKA,SAASC,SAAT,QAAoD;AAAA,MAA/BV,EAA+B,SAA/BA,EAA+B;AAAA,MAA3BW,SAA2B,SAA3BA,SAA2B;AAAA,MAAhBC,MAAgB,SAAhBA,MAAgB;AAAA,MAARC,IAAQ,SAARA,IAAQ;AAClD,MAAMC,GAAG,GAAGnD,OAAO,CAACoD,gBAAR,EAAZ;AACAD,EAAAA,GAAG,CAACH,SAAJ,CAAcvC,KAAd,GAAsBuC,SAAtB;;AAFkD,mBAGd9C,SAAS,CAACiD,GAAD,CAHK;AAAA,MAG1C/C,IAH0C,cAG1CA,IAH0C;AAAA,MAGpCE,QAHoC,cAGpCA,QAHoC;AAAA,MAGvBkB,IAHuB;;AAKlDpB,EAAAA,IAAI,CAACA,IAAL,CAAUqB,uBAAV,CAAkC,GAAlC,EAAuCzB,OAAO,CAAC0B,WAAR,GAAsBuB,MAA7D;AACAE,EAAAA,GAAG,CAACD,IAAJ,GAAWA,IAAX;AACAC,EAAAA,GAAG,CAACE,KAAJ,CAAU,CAAV;AACAd,EAAAA,GAAG,CAACe,KAAJ,CAAUC,cAAV,CAAyBpB,IAAzB,CAA8B;AAC5BE,IAAAA,EAAE,EAAFA,EAD4B;AAE5Bb,IAAAA,IAAI;AAAIpB,MAAAA,IAAI,EAAJA,IAAJ;AAAUE,MAAAA,QAAQ,EAARA;AAAV,OAAuBkB,IAAvB;AAFwB,GAA9B;AAID;;AAED,SAASgC,WAAT,QAA6B;AAAA,MAANnB,EAAM,SAANA,EAAM;AAC3BoB,EAAAA,OAAO,CAACC,GAAR,CAAY,CACV1D,OAAO,CAAC2D,MAAR,EADU,EAEVC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApC,CAFU,CAAZ,EAGGC,IAHH,CAGQ,iBAAiB;AAAA;AAAA,QAAfC,CAAe;AAAA,QAAZC,MAAY;;AACvB,QAAM1C,IAAI,GAAGtB,SAAS,CAACF,OAAO,CAACmE,uBAAR,CAAgCD,MAAhC,CAAD,CAAtB;AACA3B,IAAAA,GAAG,CAACe,KAAJ,CAAUC,cAAV,CAAyBpB,IAAzB,CAA8B;AAAEE,MAAAA,EAAE,EAAFA,EAAF;AAAMb,MAAAA,IAAI,EAAJA;AAAN,KAA9B;AACD,GAND;AAOD;;AAED,IAAM4C,YAAY,GAAGtC,OAAO,CAACS,GAAG,CAACe,KAAJ,CAAUe,SAAX,EAAsB,wBAAtB,CAA5B;AAEA,IAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAW,sCAAX,CAAf;;AAEAD,MAAM,CAACE,SAAP,GAAmB,iBAAc;AAAA,MAAXlC,IAAW,SAAXA,IAAW;AAC/BJ,EAAAA,qBAAqB,CAAC,YAAM;AAC1BK,IAAAA,GAAG,CAACe,KAAJ,CAAUmB,WAAV,CAAsBtC,IAAtB,CAA2BG,IAA3B;AACD,GAFoB,CAArB;AAGD,CAJD;;AAMA,SAASoC,oBAAT,CAA8BL,SAA9B,EAAyC;AACvCC,EAAAA,MAAM,CAACK,WAAP,CAAmBN,SAAnB;AACD;;AAED,IAAMO,aAAa,GAAG;AACpBpB,EAAAA,WAAW,EAAXA,WADoB;AAEpBY,EAAAA,YAAY,EAAZA,YAFoB;AAGpBrB,EAAAA,SAAS,EAATA,SAHoB;AAIpBzB,EAAAA,kBAAkB,EAAlBA,kBAJoB;AAKpBoD,EAAAA,oBAAoB,EAApBA;AALoB,CAAtB;;AAQA,KAAK,IAAMG,QAAX,IAAuBD,aAAvB,EAAsC;AACpCrC,EAAAA,GAAG,CAACe,KAAJ,CAAUuB,QAAV,EAAoBC,SAApB,CAA8BF,aAAa,CAACC,QAAD,CAA3C;AACD","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["import { Elm } from './Main.elm';\n\nconst context = new AudioContext();\n\nfunction buildNode(source) {\n  const gain = context.createGain();\n  const analyser = context.createAnalyser();\n\n  analyser.fftSize = 1 << 12;\n  gain.gain.value = 0;\n  source.connect(gain);\n  gain.connect(context.destination);\n  source.connect(analyser);\n  return { source, gain, analyser };\n}\n\nfunction getArray(analyser, name) {\n  const length = {\n    getFloatTimeDomainData: analyser.fftSize,\n    getFloatFrequencyDomainData: analyser.frequencyBinCount,\n  };\n\n  const list = new Float32Array(length[name]);\n  analyser[name](list);\n  return Array.from(list);\n}\n\nfunction releaseAudioSource({ release, node: { gain, source, analyser } }) {\n  gain.gain.linearRampToValueAtTime(0, context.currentTime + release);\n  setTimeout(() => {\n    [gain, source, analyser].forEach(node => {\n      node.disconnect();\n    });\n  }, release * 1000);\n}\n\nconst analyze = (port, fn) => nodes => {\n  requestAnimationFrame(() => {\n    port.send(\n      nodes.map(({ id, node: { analyser } }) => ({\n        id,\n        data: getArray(analyser, fn),\n      }))\n    );\n  });\n};\n\nconst app = Elm.Main.init({\n  node: document.querySelector('main'),\n  flags: { sampleRate: context.sampleRate },\n});\n\nfunction notePress({ id, frequency, attack, type }) {\n  const osc = context.createOscillator();\n  osc.frequency.value = frequency;\n  const { gain, analyser, ...node } = buildNode(osc);\n\n  gain.gain.linearRampToValueAtTime(0.5, context.currentTime + attack);\n  osc.type = type;\n  osc.start(0);\n  app.ports.addAudioSource.send({\n    id,\n    node: { gain, analyser, ...node },\n  });\n}\n\nfunction activateMic({ id }) {\n  Promise.all([\n    context.resume(),\n    navigator.mediaDevices.getUserMedia({ audio: true }),\n  ]).then(([_, stream]) => {\n    const node = buildNode(context.createMediaStreamSource(stream));\n    app.ports.addAudioSource.send({ id, node });\n  });\n}\n\nconst getWaveforms = analyze(app.ports.waveforms, 'getFloatTimeDomainData');\n\nconst worker = new Worker('./worker.js');\n\nworker.onmessage = ({ data }) => {\n  requestAnimationFrame(() => {\n    app.ports.frequencies.send(data);\n  });\n};\n\nfunction calculateFrequencies(waveforms) {\n  worker.postMessage(waveforms);\n}\n\nconst subscriptions = {\n  activateMic,\n  getWaveforms,\n  notePress,\n  releaseAudioSource,\n  calculateFrequencies,\n};\n\nfor (const portName in subscriptions) {\n  app.ports[portName].subscribe(subscriptions[portName]);\n}\n"]}