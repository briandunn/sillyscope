{"version":3,"sources":["main.js"],"names":["context","AudioContext","buildNode","source","gain","createGain","analyser","createAnalyser","fftSize","value","connect","destination","getArray","name","length","getFloatTimeDomainData","getFloatFrequencyDomainData","frequencyBinCount","list","Float32Array","Array","from","releaseAudioSource","release","node","linearRampToValueAtTime","currentTime","setTimeout","forEach","disconnect","analyze","port","fn","nodes","requestAnimationFrame","send","map","id","data","app","Elm","Main","init","document","querySelector","flags","sampleRate","notePress","frequency","attack","type","osc","createOscillator","start","ports","addAudioSource","activateMic","Promise","all","resume","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getWaveforms","waveforms","worker","Worker","calculateFrequencies","postMessage","onmessage","frequencies","subscriptions","portName","subscribe"],"mappings":"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","file":"main.8006f729.js","sourceRoot":"../src","sourcesContent":["import { Elm } from './Main.elm';\n\nconst context = new AudioContext();\n\nfunction buildNode(source) {\n  const gain = context.createGain();\n  const analyser = context.createAnalyser();\n\n  analyser.fftSize = 1 << 12;\n  gain.gain.value = 0;\n  source.connect(gain);\n  gain.connect(context.destination);\n  source.connect(analyser);\n  return { source, gain, analyser };\n}\n\nfunction getArray(analyser, name) {\n  const length = {\n    getFloatTimeDomainData: analyser.fftSize,\n    getFloatFrequencyDomainData: analyser.frequencyBinCount,\n  };\n\n  const list = new Float32Array(length[name]);\n  analyser[name](list);\n  return Array.from(list);\n}\n\nfunction releaseAudioSource({ release, node: { gain, source, analyser } }) {\n  gain.gain.linearRampToValueAtTime(0, context.currentTime + release);\n  setTimeout(() => {\n    [gain, source, analyser].forEach(node => {\n      node.disconnect();\n    });\n  }, release * 1000);\n}\n\nconst analyze = (port, fn) => nodes => {\n  requestAnimationFrame(() => {\n    port.send(\n      nodes.map(({ id, node: { analyser } }) => ({\n        id,\n        data: getArray(analyser, fn),\n      }))\n    );\n  });\n};\n\nconst app = Elm.Main.init({\n  node: document.querySelector('main'),\n  flags: { sampleRate: context.sampleRate },\n});\n\nfunction notePress({ id, frequency, attack, type }) {\n  const osc = context.createOscillator();\n  osc.frequency.value = frequency;\n  const { gain, analyser, ...node } = buildNode(osc);\n\n  gain.gain.linearRampToValueAtTime(0.5, context.currentTime + attack);\n  osc.type = type;\n  osc.start(0);\n  app.ports.addAudioSource.send({\n    id,\n    node: { gain, analyser, ...node },\n  });\n}\n\nfunction activateMic({ id }) {\n  Promise.all([\n    context.resume(),\n    navigator.mediaDevices.getUserMedia({ audio: true }),\n  ]).then(([_, stream]) => {\n    const node = buildNode(context.createMediaStreamSource(stream));\n    app.ports.addAudioSource.send({ id, node });\n  });\n}\n\nconst getWaveforms = analyze(app.ports.waveforms, 'getFloatTimeDomainData');\n\nconst worker = new Worker('./worker.js');\n\nworker.onmessage = ({ data }) => {\n  requestAnimationFrame(() => {\n    app.ports.frequencies.send(data);\n  });\n};\n\nfunction calculateFrequencies(waveforms) {\n  worker.postMessage(waveforms);\n}\n\nconst subscriptions = {\n  activateMic,\n  getWaveforms,\n  notePress,\n  releaseAudioSource,\n  calculateFrequencies,\n};\n\nfor (const portName in subscriptions) {\n  app.ports[portName].subscribe(subscriptions[portName]);\n}\n"]}